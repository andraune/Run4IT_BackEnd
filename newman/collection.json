{
	"info": {
		"_postman_id": "915471b7-3140-4cc5-b17f-b111857325dd",
		"name": "Run4IT_backend",
		"description": "Requests for local dev of Run4IT backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Api",
			"item": [
				{
					"name": "HomeApiV1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47da3c61-6720-4f30-ae0f-111df85b53c5",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Status code is OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Reported version is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.version).to.eql(1);",
									"});",
									"",
									"pm.test(\"Reported environment is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.env).to.eql(pm.environment.get(\"environmentString\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}"
							]
						},
						"description": "Basic GET for home page"
					},
					"response": []
				},
				{
					"name": "HomeApiV1_405",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ec2a143-5b04-4bc9-b63b-195d527787a9",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Method not allowed\", function() {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}"
							]
						},
						"description": "POST for API version not allowed."
					},
					"response": []
				},
				{
					"name": "NotFound404Json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3839fe3-4814-4bda-94a4-d15e5c76014a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Page not found\", function() {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/notfound",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"notfound"
							]
						},
						"description": "A page that does not exist - we still want to return JSON."
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5c552baa-82d0-4376-b30f-854bb686eecc",
						"type": "text/javascript",
						"exec": [
							"pm.environment.unset(\"userLoginAccessKey\");",
							"pm.environment.unset(\"userLoginRefreshKey\");",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "83dac6fa-2717-41e3-b806-eb1292443164",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "UserRegister",
			"item": [
				{
					"name": "RegisterUserMethodNotAllowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "169e2220-f215-40e3-9f89-f848a05864d2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Method not allowed\", function() {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users"
							]
						},
						"description": "GET for registering not allowed"
					},
					"response": []
				},
				{
					"name": "RegisterUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0a41e54-4f31-4037-8742-9b2edd77bb28",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test(\"Registration OK\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Registration response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql(\"user_name\");",
									"    pm.expect(jsonData.email).to.eql(\"me@mail.com\");",
									"    pm.expect(jsonData.confirmed).to.eql(false);",
									"    pm.expect(jsonData.accessToken).to.eql(\"\");",
									"    pm.expect(jsonData.refreshToken).to.eql(\"\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"username\": \"user_name\", \"email\":\"me@mail.com\", \"password\":\"passw0rd\" }\n"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users"
							]
						},
						"description": "Post request to register new user."
					},
					"response": []
				},
				{
					"name": "RegisterExistingUsername",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5b39a05-8b39-4395-84a2-a39a449145a9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"User already exists\", function() {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Registration response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.register[0]).to.eql(\"User already exists(1)\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"username\": \"existing\", \"email\":\"non-existing@mail.com\", \"password\":\"passw0rd2\" }\n"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users"
							]
						},
						"description": "Post request to register new user."
					},
					"response": []
				},
				{
					"name": "RegisterExistingEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "619ea8e5-04e6-4e29-b81f-e3d4e29be652",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"User already exists\", function() {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Registration response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.register[0]).to.eql(\"User already exists(2)\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"username\": \"nouser\", \"email\":\"existing@user.com\", \"password\":\"passw0rd3\" }\n"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users"
							]
						},
						"description": "Post request to register new user."
					},
					"response": []
				},
				{
					"name": "RegisterUser_InvalidEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87699d3c-22be-4cb7-9cb3-5d64ef0149e4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Registration response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.email[0]).to.equal(\"Not a valid email address.\")",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"username\": \"user_name\", \"email\":\"invalid_mail.com\", \"password\":\"passw0rd\" }\n"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users"
							]
						},
						"description": "Post request to register new user fails due to invalid email"
					},
					"response": []
				},
				{
					"name": "RegisterUser_InvalidUsername",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc6befdc-f219-49cf-807e-6456899f5e20",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Registration response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.username[0]).to.equal(\"Username must be 4-16 characters: a-z, A-Z, 0-9 and underscore\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"username\": \"0\", \"email\":\"me@mail.com\", \"password\":\"passw0rd\" }\n"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users"
							]
						},
						"description": "Post request to register new user fails due to invalid email"
					},
					"response": []
				}
			],
			"description": "Requests related to user registration.",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0acf55f5-3922-4cb9-a4da-a2d51a5ffb2e",
						"type": "text/javascript",
						"exec": [
							"pm.environment.unset(\"userLoginAccessKey\");",
							"pm.environment.unset(\"userLoginRefreshKey\");",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b198b476-a4ba-45af-af69-c8ac2a155a45",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "UserConfirmation",
			"item": [
				{
					"name": "ConfirmUserMethodNotAllowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "169e2220-f215-40e3-9f89-f848a05864d2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Method not allowed\", function() {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/confirmation",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"confirmation"
							]
						},
						"description": "GET for user confirmation not allowed"
					},
					"response": []
				},
				{
					"name": "ConfirmUser_NoCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1715e86-8a8b-470a-a621-97d1359d7fe3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Registration response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.confirmationCode[0]).to.equal(\"Confirmation code is required.\")",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"username\": \"nouser\" }"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/confirmation",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"confirmation"
							]
						},
						"description": "Post request to confirm new user fails due to no code provided"
					},
					"response": []
				},
				{
					"name": "ConfirmUser_NoUsername",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd558ced-b06f-48b0-9fad-972cecebdd9c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Registration response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.username[0]).to.equal(\"Username is required.\")",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"confirmationCode\": \"code\" }"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/confirmation",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"confirmation"
							]
						},
						"description": "Post request to confirm new user fails due to no username provided"
					},
					"response": []
				},
				{
					"name": "ConfirmUser_IncorrectUsername",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a9fc73a-0643-4b58-85b7-f09b3a68ba8e",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Registration response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.confirmation[0]).to.equal(\"Confirmation failed.\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"username\": \"nouser\", \"confirmationCode\": \"correct\"}"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/confirmation",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"confirmation"
							]
						},
						"description": "Post request to confirm new user fails due to invalid code"
					},
					"response": []
				},
				{
					"name": "ConfirmUser_IncorrectCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3bd74730-97fc-4030-8cc5-6eb4ffce21df",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Registration response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.confirmation[0]).to.equal(\"Confirmation failed (invalid code)\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"username\": \"confirm\", \"confirmationCode\": \"incorrect\"}"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/confirmation",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"confirmation"
							]
						},
						"description": "Post request to confirm new user fails due to invalid code"
					},
					"response": []
				},
				{
					"name": "ConfirmUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "604e1eb7-f853-4444-aab2-9e4ffc9011a1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Confirmation OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Confirmation response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql(\"confirm\");",
									"    pm.expect(jsonData.email).to.eql(\"confirm@user.com\");",
									"    pm.expect(jsonData.confirmed).to.eql(true);",
									"    pm.expect(jsonData.accessToken).to.eql(\"\");",
									"    pm.expect(jsonData.refreshToken).to.eql(\"\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"username\": \"confirm\", \"confirmationCode\": \"correct\"}"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/confirmation",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"confirmation"
							]
						},
						"description": "Post request to confirm new user fails due to invalid code"
					},
					"response": []
				}
			],
			"description": "Requests related to confirmation of user email.",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ff6c6802-a291-47f5-ae5e-92838a88dde3",
						"type": "text/javascript",
						"exec": [
							"pm.environment.unset(\"userLoginAccessKey\");",
							"pm.environment.unset(\"userLoginRefreshKey\");",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4df391bf-a462-44f7-a100-c1f92a0d1513",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "UserLogin",
			"item": [
				{
					"name": "LoginMethodNotAllowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "169e2220-f215-40e3-9f89-f848a05864d2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Method not allowed\", function() {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/login",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"login"
							]
						},
						"description": "GET for login not allowed"
					},
					"response": []
				},
				{
					"name": "Login_NoEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d468d20e-3454-470b-9370-86c3154e4261",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Registration response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.email[0]).to.equal(\"Email is required.\")",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"password\": \"passw0rd\" }"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/login",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"login"
							]
						},
						"description": "Post request to log in new user fails due to no email provided"
					},
					"response": []
				},
				{
					"name": "Login_NoPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d947127e-0974-4323-b8ab-6787439dfb06",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Status code is 422\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Registration response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.password[0]).to.equal(\"Password is required.\")",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"email\": \"login@mail.com\" }"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/login",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"login"
							]
						},
						"description": "Post request to log in new user fails due to no password provided"
					},
					"response": []
				},
				{
					"name": "Login_NoUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd11db2c-afeb-4afa-9895-fa753dd3f1f2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Login failed\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Registration response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.login[0]).to.equal(\"Login failed\")",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"email\": \"user@nomail.com\", \"password\": \"passw0rd\" }"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/login",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"login"
							]
						},
						"description": "Post request to log in new user fails because email is not registered."
					},
					"response": []
				},
				{
					"name": "Login_UserNotConfirmed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "261d4840-f0f3-4be6-91a6-099a9b2658e5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Login failed\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Registration response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.login[0]).to.equal(\"Login failed\")",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"email\": \"existing@user.com\", \"password\": \"pwd\" }"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/login",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"login"
							]
						},
						"description": "Post request to log in new user because user's email hasn't been confirmed."
					},
					"response": []
				},
				{
					"name": "Login_IncorrectPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f1ddad7-5028-4e94-8b72-371c015831ed",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Login failed\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Registration response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.login[0]).to.equal(\"Login failed\")",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"email\": \"confirm@user.com\", \"password\": \"incorrect\" }"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/login",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"login"
							]
						},
						"description": "Post request to log in user because password is incorrect."
					},
					"response": []
				},
				{
					"name": "LoginUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9f62c10-3245-41b3-bb33-e26073f8b36a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Login OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Login response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql(\"confirm\");",
									"    pm.expect(jsonData.email).to.eql(\"confirm@user.com\");",
									"    pm.expect(jsonData.confirmed).to.eql(true);",
									"    pm.expect(jsonData.accessToken).to.not.eql(\"\");",
									"    pm.expect(jsonData.refreshToken).to.not.eql(\"\");",
									"    pm.expect(jsonData.refreshToken).to.not.eql(jsonData.accessToken);",
									"    pm.environment.set(\"userLoginAccessKey\", jsonData.accessToken);",
									"    pm.environment.set(\"userLoginRefreshKey\", jsonData.refreshToken);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5de7eb5b-bdbf-4bdc-aed7-d089df675911",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset(\"userLoginAccessKey\");",
									"pm.environment.unset(\"userLoginRefreshKey\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"email\": \"confirm@user.com\", \"password\": \"pwd\" }"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/login",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"login"
							]
						},
						"description": "Post request to log in user because password is incorrect."
					},
					"response": []
				},
				{
					"name": "GetTokens_AfterLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c74f1b1-9387-4837-9cd6-7a851b452afb",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Login response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(2)",
									"    pm.expect(jsonData[0].tokenType).to.equal(\"access\")",
									"    pm.expect(jsonData[0].username).to.equal(\"confirm\")",
									"    pm.expect(jsonData[0].revoked).to.equal(false)",
									"    pm.expect(jsonData[1].tokenType).to.equal(\"refresh\")",
									"    pm.expect(jsonData[1].username).to.equal(\"confirm\")",
									"    pm.expect(jsonData[1].revoked).to.equal(false)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/tokens",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUser_AfterLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c74f1b1-9387-4837-9cd6-7a851b452afb",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetUser OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetUser response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.equal(\"confirm\")",
									"    pm.expect(jsonData.accessToken).to.equal(\"\")",
									"    pm.expect(jsonData.refreshToken).to.equal(\"\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/user",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"user"
							]
						}
					},
					"response": []
				}
			],
			"description": "Requests related to user login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8b13c84d-4d38-42b8-bd62-b2a0c13e0a66",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7f5a40d2-c8ce-4a09-8186-7982d9697c09",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "UserRefreshLogin",
			"item": [
				{
					"name": "RefreshMethodNotAllowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29bf650c-c24f-4506-9e4d-eebc7f8665eb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Method not allowed\", function() {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/loginRefresh",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"loginRefresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh_NoToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4a43dba-81fa-4d58-ba78-b815c5a8658c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"LoginRefresh failed\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"LoginRefresh response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.auth[0]).to.equal(\"Missing Authorization Header\")",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/loginRefresh",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"loginRefresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh_IncorrectTokenType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29fe4304-1521-4b49-9dd3-b33184a7d4a8",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"LoginRefresh failed\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"LoginRefresh response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.auth[0]).to.equal(\"Invalid token.\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userLoginAccessKey}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/loginRefresh",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"loginRefresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh_InvalidTokenData",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29fe4304-1521-4b49-9dd3-b33184a7d4a8",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"LoginRefresh failed\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"LoginRefresh response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.auth[0]).to.equal(\"Invalid token.\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "justSome10%RandomData",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/loginRefresh",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"loginRefresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "RefreshToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a167a60-11d3-46b5-acdd-1966a267b509",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"LoginRefresh success\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"LoginRefresh response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql(\"confirm\");",
									"    pm.expect(jsonData.email).to.eql(\"confirm@user.com\");",
									"    pm.expect(jsonData.confirmed).to.eql(true);",
									"    pm.expect(jsonData.accessToken).to.not.eql(\"\");",
									"    pm.expect(jsonData.refreshToken).to.eql(\"\");",
									"    pm.environment.set(\"userLoginAccessKey\", jsonData.accessToken);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c32b0d2c-36b1-4418-bea2-0b12fb1d4785",
								"exec": [
									"// Add a timeout here to ensure that refreshed access token has different expiry from the original one (when running collection)",
									"setTimeout(function(){}, 1000);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/loginRefresh",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"loginRefresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTokens_AfterLoginRefresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18c5d696-a622-48c7-8a04-66d1ae804d60",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Login response\", function () { // returns tokens sorted by type",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(3)",
									"    pm.expect(jsonData[0].id).to.equal(3)",
									"    pm.expect(jsonData[0].tokenType).to.equal(\"access\")",
									"    pm.expect(jsonData[1].id).to.equal(1)",
									"    pm.expect(jsonData[1].tokenType).to.equal(\"access\")",
									"    pm.expect(jsonData[2].id).to.equal(2)",
									"    pm.expect(jsonData[2].tokenType).to.equal(\"refresh\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userLoginAccessKey}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/tokens",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"tokens"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{userLoginRefreshKey}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0879342e-db91-4390-a102-bfde61e1dd08",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e6496f5e-3224-4cd6-acdc-60967ae647e9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Token",
			"item": [
				{
					"name": "TokenListMethodNotAllowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "169e2220-f215-40e3-9f89-f848a05864d2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Method not allowed\", function() {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/tokens",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"tokens"
							]
						},
						"description": "GET for registering not allowed"
					},
					"response": []
				},
				{
					"name": "LoginUserFresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9f62c10-3245-41b3-bb33-e26073f8b36a",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Login OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Login response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql(\"confirm\");",
									"    pm.expect(jsonData.email).to.eql(\"confirm@user.com\");",
									"    pm.expect(jsonData.confirmed).to.eql(true);",
									"    pm.expect(jsonData.accessToken).to.not.eql(\"\");",
									"    pm.expect(jsonData.refreshToken).to.not.eql(jsonData.accessToken);",
									"    pm.environment.set(\"userLoginAccessKey\", jsonData.accessToken);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5de7eb5b-bdbf-4bdc-aed7-d089df675911",
								"exec": [
									"pm.environment.unset(\"userLoginAccessKey\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"email\": \"confirm@user.com\", \"password\": \"pwd\" }"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/loginFresh",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"loginFresh"
							]
						},
						"description": "Post request to log in user because password is incorrect."
					},
					"response": []
				},
				{
					"name": "GetTokens_NoToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c07c5180-070d-4e27-9b80-013ac41be6cc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens failed\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetTokens response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.auth[0]).to.equal(\"Missing Authorization Header\")",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/tokens",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"tokens"
							]
						},
						"description": "GET for registering not allowed"
					},
					"response": []
				},
				{
					"name": "GetTokens_IncorrectTokenType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eda03eca-ce96-4469-bb75-2839f77826f9",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens failed\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetTokens response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.auth[0]).to.equal(\"Invalid token.\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userLoginRefreshKey}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/tokens",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"tokens"
							]
						},
						"description": "GET for registering not allowed"
					},
					"response": []
				},
				{
					"name": "GetTokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a2a02cb-9e36-4073-94f8-b26d73495979",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetTokens response\", function () { // sorted by type",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(4)",
									"    pm.expect(jsonData[0].tokenType).to.equal(\"access\")",
									"    pm.expect(jsonData[0].username).to.equal(\"confirm\")",
									"    pm.expect(jsonData[0].revoked).to.equal(false)",
									"    pm.expect(jsonData[1].tokenType).to.equal(\"access\")",
									"    pm.expect(jsonData[1].username).to.equal(\"confirm\")",
									"    pm.expect(jsonData[1].revoked).to.equal(false)",
									"    pm.expect(jsonData[2].tokenType).to.equal(\"access\")",
									"    pm.expect(jsonData[2].username).to.equal(\"confirm\")",
									"    pm.expect(jsonData[2].revoked).to.equal(false)",
									"    pm.expect(jsonData[3].tokenType).to.equal(\"refresh\")",
									"    pm.expect(jsonData[3].username).to.equal(\"confirm\")",
									"    pm.expect(jsonData[3].revoked).to.equal(false)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/tokens",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "TokenMethodNotAllowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "169e2220-f215-40e3-9f89-f848a05864d2",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Method not allowed\", function() {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/tokens/2",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"tokens",
								"2"
							]
						},
						"description": "GET for registering not allowed"
					},
					"response": []
				},
				{
					"name": "GetToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a2a02cb-9e36-4073-94f8-b26d73495979",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetToken response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tokenType).to.equal(\"access\")",
									"    pm.expect(jsonData.username).to.equal(\"confirm\")",
									"    pm.expect(jsonData.revoked).to.equal(false)",
									"    pm.expect(jsonData.id).to.equal(1)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/tokens/1",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"tokens",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTokenNotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a2a02cb-9e36-4073-94f8-b26d73495979",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetToken response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[\"token\"][0]).to.equal(\"Token not found.\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/tokens/999",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"tokens",
								"999"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateTokenUsernameTypeNotPossible",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a2a02cb-9e36-4073-94f8-b26d73495979",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Update Token response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tokenType).to.equal(\"refresh\")",
									"    pm.expect(jsonData.username).to.equal(\"confirm\")",
									"    pm.expect(jsonData.revoked).to.equal(false)",
									"    pm.expect(jsonData.id).to.equal(2)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"tokenType\":\"crap\", \"username\":\"buster\", \"revoked\":\"false\" }"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/tokens/2",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"tokens",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateTokenRevoke",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a2a02cb-9e36-4073-94f8-b26d73495979",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Update Token response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tokenType).to.equal(\"refresh\")",
									"    pm.expect(jsonData.username).to.equal(\"confirm\")",
									"    pm.expect(jsonData.revoked).to.equal(true)",
									"    pm.expect(jsonData.id).to.equal(2)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"revoked\":\"true\" }"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/tokens/2",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"tokens",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateTokenUnrevoke",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a2a02cb-9e36-4073-94f8-b26d73495979",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Update Token response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.tokenType).to.equal(\"refresh\")",
									"    pm.expect(jsonData.username).to.equal(\"confirm\")",
									"    pm.expect(jsonData.revoked).to.equal(false)",
									"    pm.expect(jsonData.id).to.equal(2)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"revoked\":\"false\" }"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/tokens/2",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"tokens",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a2a02cb-9e36-4073-94f8-b26d73495979",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"DeleteToken response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.messages[\"token\"][0]).to.equal(\"Token deleted.\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/tokens/2",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"tokens",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteNonexistingToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a2a02cb-9e36-4073-94f8-b26d73495979",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"DeleteToken response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[\"token\"][0]).to.equal(\"Token not found.\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/tokens/2",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"tokens",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9b07270f-4576-4913-a5f7-71fd275003f9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e706d291-dcbf-48ef-863b-7113a555d4c7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "UserLogout",
			"item": [
				{
					"name": "LogoutMethodNotAllowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "169e2220-f215-40e3-9f89-f848a05864d2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Method not allowed\", function() {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/login",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"login"
							]
						},
						"description": "GET for login not allowed"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "UserLogoutRefresh",
			"item": [
				{
					"name": "LogoutRefreshMethodNotAllowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "169e2220-f215-40e3-9f89-f848a05864d2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Method not allowed\", function() {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/logoutRefresh",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"logoutRefresh"
							]
						},
						"description": "GET for login not allowed"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "UserProfile",
			"item": [
				{
					"name": "UsernameRequiredInUrl",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "169e2220-f215-40e3-9f89-f848a05864d2",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Method not allowed\", function() {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles"
							]
						},
						"description": "GET for registering not allowed"
					},
					"response": []
				},
				{
					"name": "ProfilePostNotAllowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "169e2220-f215-40e3-9f89-f848a05864d2",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Method not allowed\", function() {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/username",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"username"
							]
						},
						"description": "GET for registering not allowed"
					},
					"response": []
				},
				{
					"name": "UserProfileDeleteNotAllowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "169e2220-f215-40e3-9f89-f848a05864d2",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Method not allowed\", function() {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/username",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"username"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a2a02cb-9e36-4073-94f8-b26d73495979",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetProfile response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.equal(\"confirm\")",
									"    pm.expect(jsonData.height).to.equal(null)",
									"    pm.expect(jsonData.birthDate).to.equal(null)",
									"    pm.expect(jsonData.weight).to.equal(70.1)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/confirm",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"confirm"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateHeight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a2a02cb-9e36-4073-94f8-b26d73495979",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetProfile response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.equal(\"confirm\")",
									"    pm.expect(jsonData.height).to.equal(180)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"height\" : 180\n}"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/confirm",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"confirm"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBirthDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a2a02cb-9e36-4073-94f8-b26d73495979",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetProfile response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.equal(\"confirm\")",
									"    pm.expect(jsonData.birthDate).to.equal(\"1998-06-23\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"birthDate\" : \"1998-06-23\"\n}"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/confirm",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"confirm"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateWeight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a2a02cb-9e36-4073-94f8-b26d73495979",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetProfile response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.equal(\"confirm\")",
									"    pm.expect(jsonData.birthDate).to.equal(\"1998-06-23\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"weight\" : 78.9\n}"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/confirm",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"confirm"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateInvalidValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a2a02cb-9e36-4073-94f8-b26d73495979",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetProfile response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.birthDate.length).to.equal(1)",
									"    pm.expect(jsonData.errors.height.length).to.equal(1)",
									"    pm.expect(jsonData.errors.weight.length).to.equal(1)",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"height\" : 999,\n\t\"birthDate\" : \"1899-12.31\",\n\t\"weight\" : 1010\n}"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/confirm",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"confirm"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUpdatedProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a2a02cb-9e36-4073-94f8-b26d73495979",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetProfile response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.equal(\"confirm\")",
									"    pm.expect(jsonData.height).to.equal(180)",
									"    pm.expect(jsonData.birthDate).to.equal(\"1998-06-23\")",
									"    pm.expect(jsonData.weight).to.equal(78.9)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/confirm",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"confirm"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetProfileWeigths",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a2a02cb-9e36-4073-94f8-b26d73495979",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetProfile response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(2)",
									"    pm.expect(jsonData[0].weight).to.be.above(0.0)",
									"    pm.expect(jsonData[0].weight).to.be.below(1000.0)",
									"    pm.expect(jsonData[1].weight).to.be.above(0.0)",
									"    pm.expect(jsonData[1].weight).to.be.below(1000.0)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/confirm/weight",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"confirm",
								"weight"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Discipline",
			"item": [
				{
					"name": "GetDisciplines",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82c6a39f-bd84-4707-a49f-189848ed1a0d",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetDisciplines response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.above(2)",
									"    pm.expect(jsonData[0][\"length\"]).to.be.above(0)",
									"    pm.expect(jsonData[0][\"name\"].length).to.be.above(0)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/disciplines",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"disciplines"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetDisciplinesLimit2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18e95360-8e5f-492b-bcc1-10ab32e9bb62",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetDisciplines response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(2)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/disciplines?limit=2",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"disciplines"
							],
							"query": [
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetDisciplinesLimit2Offset1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82c6a39f-bd84-4707-a49f-189848ed1a0d",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetProfile response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(2)",
									"    pm.expect(jsonData[0][\"length\"]).to.be.above(0)",
									"    pm.expect(jsonData[0][\"name\"].length).to.be.above(0)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/disciplines?offset=1&limit=2",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"disciplines"
							],
							"query": [
								{
									"key": "offset",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetDisciplineByiD",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82c6a39f-bd84-4707-a49f-189848ed1a0d",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetDisciplineByID response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"id\"]).to.equal(2)",
									"    pm.expect(jsonData[\"name\"].length).to.be.above(1)",
									"    pm.expect(jsonData[\"length\"]).to.be.above(0)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/disciplines/2",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"disciplines",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddNewDiscipline",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38a4fcab-d366-4efd-aa17-c0620b3a330b",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetProfile response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"id\"]).to.be.above(0)",
									"    pm.expect(jsonData[\"name\"]).to.equal(\"Marathon\")",
									"    pm.expect(jsonData[\"length\"]).to.equal(42195)",
									"    pm.expect(jsonData[\"username\"]).to.equal(\"confirm\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\" : \"Marathon\",\n\t\"length\": 42195\n}"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/disciplines",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"disciplines"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateDiscipline",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38a4fcab-d366-4efd-aa17-c0620b3a330b",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"GetTokens OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"GetProfile response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"id\"]).to.be.above(0)",
									"    pm.expect(jsonData[\"name\"]).to.equal(\"Half-marathon\")",
									"    pm.expect(jsonData[\"length\"]).to.equal(21098)",
									"    pm.expect(jsonData[\"username\"]).to.equal(\"confirm\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\" : \"Half-marathon\",\n\t\"length\": 21098\n}"
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/disciplines/4",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"disciplines",
								"4"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ProfileGoals",
			"item": [
				{
					"name": "LoginActiveUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9f62c10-3245-41b3-bb33-e26073f8b36a",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Login OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Login response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql(\"JonnyIT\");",
									"    pm.expect(jsonData.confirmed).to.eql(true);",
									"    pm.expect(jsonData.accessToken).to.not.eql(\"\");",
									"    pm.expect(jsonData.refreshToken).to.not.eql(\"\");",
									"    pm.environment.set(\"userLoginAccessKey\", jsonData.accessToken);",
									"    pm.environment.set(\"userLoginRefreshKey\", jsonData.refreshToken);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5de7eb5b-bdbf-4bdc-aed7-d089df675911",
								"exec": [
									"pm.environment.unset(\"userLoginAccessKey\");",
									"pm.environment.unset(\"userLoginRefreshKey\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"email\": \"active@user.com\", \"password\": \"pwd\" }",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/login",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"login"
							]
						},
						"description": "Post request to log in user because password is incorrect."
					},
					"response": []
				},
				{
					"name": "GetActiveGoals",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58b09a74-d843-4b97-beeb-7d3a0d9988e8",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Active goal response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(2);",
									"    pm.expect(jsonData[0].id).to.eql(2);",
									"    pm.expect(jsonData[0].duration).to.eql(7);",
									"    pm.expect(jsonData[0].categoryName).to.eql(\"Weight target\");",
									"    pm.expect(jsonData[0].startValue).to.be.above(0);",
									"    pm.expect(jsonData[0].targetValue).to.be.above(0);",
									"    pm.expect(jsonData[0].currentValue).to.be.above(0);",
									"    pm.expect(jsonData[0].startAt).to.not.equal(\"\");",
									"    pm.expect(jsonData[0].endAt).to.not.equal(\"\");",
									"    pm.expect(jsonData[1].id).to.eql(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/JonnyIT/goals?filter=active",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"JonnyIT",
								"goals"
							],
							"query": [
								{
									"key": "filter",
									"value": "active"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetExpiredGoals",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58b09a74-d843-4b97-beeb-7d3a0d9988e8",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Expired goal response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(2);",
									"    pm.expect(jsonData[0].id).to.eql(4);",
									"    pm.expect(jsonData[1].id).to.eql(5);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/JonnyIT/goals?filter=expired",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"JonnyIT",
								"goals"
							],
							"query": [
								{
									"key": "filter",
									"value": "expired"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCompletedGoals",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58b09a74-d843-4b97-beeb-7d3a0d9988e8",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Completed goal response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(1);",
									"    pm.expect(jsonData[0].id).to.eql(5);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/JonnyIT/goals?filter=completed",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"JonnyIT",
								"goals"
							],
							"query": [
								{
									"key": "filter",
									"value": "completed"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetIncompletedGoals",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58b09a74-d843-4b97-beeb-7d3a0d9988e8",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Incompleted goal response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(1);",
									"    pm.expect(jsonData[0].id).to.eql(4);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/JonnyIT/goals?filter=incompleted",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"JonnyIT",
								"goals"
							],
							"query": [
								{
									"key": "filter",
									"value": "incompleted"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetFutureGoals",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58b09a74-d843-4b97-beeb-7d3a0d9988e8",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Future goal response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(1);",
									"    pm.expect(jsonData[0].id).to.eql(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/JonnyIT/goals?filter=future",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"JonnyIT",
								"goals"
							],
							"query": [
								{
									"key": "filter",
									"value": "future"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetGoalByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53201eea-4e6f-4d17-8e61-e8b782e79192",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Goal by ID response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"id\"]).to.eql(2);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/JonnyIT/goals/2",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"JonnyIT",
								"goals",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateGoal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b62c7925-57d1-4346-9198-6e6cd7dcccdf",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"CreateGoal response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"startValue\"]).to.eql(1.0);",
									"    pm.expect(jsonData[\"targetValue\"]).to.eql(23.0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"startAt\" : \"2021-07-08 12:13:14-01:00\",\r\n    \"duration\": 365,\r\n\t\"startValue\": 1.0,\r\n    \"targetValue\": 23.0,\r\n    \"categoryID\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/JonnyIT/goals",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"JonnyIT",
								"goals"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateGoal",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2713d49-0051-4091-898e-d8a771f5d6b7",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"CreateGoal response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"startValue\"]).to.eql(81.0);",
									"    pm.expect(jsonData[\"targetValue\"]).to.eql(70.0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"startAt\" : \"2021-07-08 12:13:14-01:00\",\r\n    \"duration\": 365,\r\n\t\"startValue\": 81.0,\r\n    \"targetValue\": 70.0,\r\n    \"categoryID\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/JonnyIT/goals/1",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"JonnyIT",
								"goals",
								"1"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ProfileWorkouts",
			"item": [
				{
					"name": "LoginActiveUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6d8ba77-0ade-4354-9c08-10bfcf8851cc",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Login OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Login response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.username).to.eql(\"JonnyIT\");",
									"    pm.expect(jsonData.confirmed).to.eql(true);",
									"    pm.expect(jsonData.accessToken).to.not.eql(\"\");",
									"    pm.expect(jsonData.refreshToken).to.not.eql(\"\");",
									"    pm.environment.set(\"userLoginAccessKey\", jsonData.accessToken);",
									"    pm.environment.set(\"userLoginRefreshKey\", jsonData.refreshToken);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e3b22af3-becf-44c3-b3f8-9d6ee09dd685",
								"exec": [
									"pm.environment.unset(\"userLoginAccessKey\");",
									"pm.environment.unset(\"userLoginRefreshKey\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"email\": \"active@user.com\", \"password\": \"pwd\" }",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/users/login",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"users",
								"login"
							]
						},
						"description": "Post request to log in user because password is incorrect."
					},
					"response": []
				},
				{
					"name": "GetWorkouts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f93aa380-a8a3-4a48-b831-f81953c0f648",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Workouts response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.above(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/JonnyIT/workouts",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"JonnyIT",
								"workouts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetWorkoutsLimit1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6bdc9395-393c-43a1-b9f0-812cbca168c4",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Workouts response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/JonnyIT/workouts?limit=1",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"JonnyIT",
								"workouts"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetWorkoutsLimit1Offset1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49607528-fdb1-4841-9824-b19d6c3a005a",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Workouts response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.equal(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/JonnyIT/workouts?limit=1&offset=1",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"JonnyIT",
								"workouts"
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetWorkoutByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83f2aca8-df5d-495f-8da1-9c84541dfb40",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"Workouts response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"id\"]).to.equal(2);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/JonnyIT/workouts/2",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"JonnyIT",
								"workouts",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateWorkout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d32b6ef4-461b-4ad9-b9ef-a2786571aa48",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"CreateWorkout response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"distance\"]).to.eql(42195);",
									"    pm.expect(jsonData[\"duration\"]).to.eql(7273);",
									"    pm.expect(jsonData[\"categoryName\"]).to.eql(\"Running\");",
									"    pm.expect(jsonData[\"averageSpeed\"]).to.eql(20.89);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\" : \"My created run\",\r\n    \"startAt\" : \"2020-07-01T12:13:14+00:00\",\r\n    \"distance\" : 42195,\r\n    \"duration\" : 7273,\r\n    \"climb\" : 42,\r\n    \"edited\" : true,\r\n    \"categoryID\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/JonnyIT/workouts",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"JonnyIT",
								"workouts"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateWorkout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40565880-a4a6-45f2-beff-aaba5c13611a",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
									"});",
									"",
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"CreateWorkout response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"id\"]).to.eql(1);",
									"    pm.expect(jsonData[\"distance\"]).to.eql(87654);",
									"    pm.expect(jsonData[\"duration\"]).to.eql(31012);",
									"    pm.expect(jsonData[\"categoryName\"]).to.eql(\"Hiking\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\" : \"My updated hike\",\r\n    \"startAt\" : \"2020-07-01T12:13:14+00:00\",\r\n    \"distance\" : 87654,\r\n    \"duration\" : 31012,\r\n    \"climb\" : 1780,\r\n    \"edited\" : false,\r\n    \"categoryID\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/JonnyIT/workouts/1",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"JonnyIT",
								"workouts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "UploadWorkoutGpx",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34870ac0-62cd-425a-8378-0e876576d154",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableUploadResponseTime\")));",
									"});",
									"",
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"CreateWorkout response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"id\"]).to.be.above(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "gpxfile",
									"type": "file",
									"src": "test.gpx"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/JonnyIT/workouts/gpx/1",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"JonnyIT",
								"workouts",
								"gpx",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "UploadWorkoutTcx",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "752f2c0a-a3e1-4f0a-9b5c-b7c8f3b6536d",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableUploadResponseTime\")));",
									"});",
									"",
									"pm.test(\"Response OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is JSON\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"CreateWorkout response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"id\"]).to.be.above(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "gpxfile",
									"type": "file",
									"src": "test_garmin.tcx"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/profiles/JonnyIT/workouts/gpx/2",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"profiles",
								"JonnyIT",
								"workouts",
								"gpx",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Workout",
			"item": [
				{
					"name": "WorkoutCategoryList",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddfa0db1-68f1-470f-b5cb-fcfb301fce51",
								"exec": [
									"pm.test(\"Response time is acceptable\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));\r",
									"});\r",
									"\r",
									"pm.test(\"GetWorkoutCategories OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is JSON\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"GetWorkoutCategories response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.above(0)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiBaseUrl}}/{{apiVersion}}/workout_categories",
							"host": [
								"{{apiBaseUrl}}"
							],
							"path": [
								"{{apiVersion}}",
								"workout_categories"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{userLoginAccessKey}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "15ed6e62-c84c-40f1-a966-f3e7ab1ba386",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "59aff49f-f071-4974-9da8-7f9abffa2337",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}