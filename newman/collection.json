{
	"info": {
		"_postman_id": "915471b7-3140-4cc5-b17f-b111857325dd",
		"name": "Run4IT_backend",
		"description": "Requests for local dev of Run4IT backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"_postman_id": "408f698a-0088-4157-94cd-be66405fd41d",
			"name": "HomeApiV1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "af2182dc-2dd1-4ac7-a67d-93d3d64dc248",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is acceptable\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
							"});",
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is JSON\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"Reported version is 1\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.version).to.eql(1);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{apiBaseUrl}}/{{apiVersion}}",
					"host": [
						"{{apiBaseUrl}}"
					],
					"path": [
						"{{apiVersion}}"
					]
				},
				"description": "Basic GET for home page"
			},
			"response": []
		},
		{
			"_postman_id": "2a2ff7ca-37d8-49a3-8d5b-ef634cad1a66",
			"name": "HomeApiV1_405",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ec2a143-5b04-4bc9-b63b-195d527787a9",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is acceptable\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
							"});",
							"",
							"pm.test(\"Method not allowed\", function() {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"pm.test(\"Content-Type is JSON\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{apiBaseUrl}}/{{apiVersion}}/",
					"host": [
						"{{apiBaseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						""
					]
				},
				"description": "POST for API version not allowed."
			},
			"response": []
		},
		{
			"_postman_id": "f70a548c-3b2f-44c8-90e9-1e9aff35e5b8",
			"name": "NotFound404Json",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a2a447d6-7a07-4bea-ad1a-a587e7391659",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is acceptable\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
							"});",
							"",
							"pm.test(\"Status code is 404\", function() {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Content-Type is JSON\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{apiBaseUrl}}/{{apiVersion}}/notfound",
					"host": [
						"{{apiBaseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						"notfound"
					]
				},
				"description": "A page that does not exist - we still want to return JSON."
			},
			"response": []
		},
		{
			"_postman_id": "56010de6-955d-47b2-be10-8e746d9b30c1",
			"name": "RegisterUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f779b360-637e-48e0-8980-ec6e81874938",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is acceptable\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
							"});",
							"",
							"pm.test(\"User registered\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Content-Type is JSON\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"Registration response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.username).to.eql(\"user_name\");",
							"    pm.expect(jsonData.email).to.eql(\"me@mail.com\");",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"username\": \"user_name\", \"email\":\"me@mail.com\", \"password\":\"passw0rd\" }\n"
				},
				"url": {
					"raw": "{{apiBaseUrl}}/{{apiVersion}}/user/register",
					"host": [
						"{{apiBaseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						"user",
						"register"
					]
				},
				"description": "Post request to register new user."
			},
			"response": []
		},
		{
			"_postman_id": "3eb6f0b6-0393-42fd-88ba-a077383b9a07",
			"name": "RegisterExistingUsername",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e5b39a05-8b39-4395-84a2-a39a449145a9",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is acceptable\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
							"});",
							"",
							"pm.test(\"User already exists\", function() {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Content-Type is JSON\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"Registration response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.register[0]).to.eql(\"User already exists(1)\");",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"username\": \"existing\", \"email\":\"non-existing@mail.com\", \"password\":\"passw0rd2\" }\n"
				},
				"url": {
					"raw": "{{apiBaseUrl}}/{{apiVersion}}/user/register",
					"host": [
						"{{apiBaseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						"user",
						"register"
					]
				},
				"description": "Post request to register new user."
			},
			"response": []
		},
		{
			"_postman_id": "bccdfac8-ec32-4519-b143-fa5117cef075",
			"name": "RegisterExistingEmail",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "619ea8e5-04e6-4e29-b81f-e3d4e29be652",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is acceptable\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
							"});",
							"",
							"pm.test(\"User already exists\", function() {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Content-Type is JSON\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"Registration response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.register[0]).to.eql(\"User already exists(2)\");",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"username\": \"nouser\", \"email\":\"existing@user.com\", \"password\":\"passw0rd3\" }\n"
				},
				"url": {
					"raw": "{{apiBaseUrl}}/{{apiVersion}}/user/register",
					"host": [
						"{{apiBaseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						"user",
						"register"
					]
				},
				"description": "Post request to register new user."
			},
			"response": []
		},
		{
			"_postman_id": "c57a3e43-8ecc-4dfd-9467-dcc7f5221d57",
			"name": "RegisterUser_405",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "169e2220-f215-40e3-9f89-f848a05864d2",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is acceptable\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
							"});",
							"",
							"pm.test(\"Method not allowed\", function() {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"pm.test(\"Content-Type is JSON\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{apiBaseUrl}}/{{apiVersion}}/user/register",
					"host": [
						"{{apiBaseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						"user",
						"register"
					]
				},
				"description": "GET for registering not allowed"
			},
			"response": []
		},
		{
			"_postman_id": "612af22c-c89f-475b-bab1-6c61ee88ea90",
			"name": "RegisterUser_422",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "87699d3c-22be-4cb7-9cb3-5d64ef0149e4",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is acceptable\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(parseInt(pm.environment.get(\"acceptableResponseTime\")));",
							"});",
							"",
							"pm.test(\"Status code is 422\", function() {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Content-Type is JSON\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"Registration response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.email[0]).to.equal(\"Not a valid email address.\")",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"username\": \"user_name\", \"email\":\"invalid_mail.com\", \"password\":\"passw0rd\" }\n"
				},
				"url": {
					"raw": "{{apiBaseUrl}}/{{apiVersion}}/user/register",
					"host": [
						"{{apiBaseUrl}}"
					],
					"path": [
						"{{apiVersion}}",
						"user",
						"register"
					]
				},
				"description": "Post request to register new user fails due to invalid email"
			},
			"response": []
		}
	]
}